on:
  push: # 指定したブランチにpushされた際に実行
    branches: [ main ]

name: Deploy to Amazon ECS

env:
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup docker
      shell: bash
      run:
        docker-compose run web yarn install --check-files
        && docker-compose run web yarn upgrade
        && docker-compose build
        && docker-compose run web rake db:create
        && docker-compose run web rake db:migrate
        && docker-compose run web rake db:seed
      env:
        RAILS_ENV: test
    - name: Run RSpec
      shell: bash
      run:
        docker-compose run web bundle exec rspec

    # テスト成功時はこちらのステップが実行される
    - name: Slack Notification on Success
      if: success()
      uses: rtCamp/action-slack-notify@v2.0.2
      env:
        SLACK_CHANNEL: github_actions
        SLACK_TITLE: Test Success
        SLACK_COLOR: good

    # テスト失敗時はこちらのステップが実行される
    - name: Slack Notification on Failure
      uses: rtCamp/action-slack-notify@v2.0.2
      if: failure()
      env:
        SLACK_CHANNEL: github_actions
        SLACK_TITLE: Test Failure
        SLACK_COLOR: danger
  deploy:
    name: Deploy
    needs: test
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1
        # task-definition: ${{ secrets.TASK_DEFINITION_FILE }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.MY_APP_PREFIX }}-app # ECRリポジトリ名 with PREFIX
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -f ecs/Dockerfile . -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ecs/task-definition.json
        container-name: app # appコンテナを指定
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ secrets.MY_APP_PREFIX }}-service
        cluster: ${{ secrets.MY_APP_PREFIX }}-cluster

    # デプロイ成功時はこちらのステップが実行される
    - name: Slack Notification on Success
      if: success()
      uses: rtCamp/action-slack-notify@v2.0.2
      env:
        SLACK_CHANNEL: github_actions
        SLACK_TITLE: Deploy Success
        SLACK_COLOR: good

    # デプロイ失敗時はこちらのステップが実行される
    - name: Slack Notification on Failure
      uses: rtCamp/action-slack-notify@v2.0.2
      if: failure()
      env:
        SLACK_CHANNEL: github_actions
        SLACK_TITLE: Deploy Failure
        SLACK_COLOR: danger